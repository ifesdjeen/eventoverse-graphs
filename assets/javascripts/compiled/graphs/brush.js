// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Eventoverse.Graphs.Brush = (function() {

    function Brush(canvas) {
      this.canvas = canvas;
      this.onBrushEnd = __bind(this.onBrushEnd, this);

      this.onBrush = __bind(this.onBrush, this);

      this.render = __bind(this.render, this);

      this.x2 = d3.time.scale().range([0, this.canvas.width]);
      this.brush = d3.svg.brush().x(this.x2).on("brush", this.onBrush).on("brushend", this.onBrushEnd);
    }

    Brush.prototype.convertData = function(data) {
      return data[0].values;
    };

    Brush.prototype.render = function(data) {
      data = this.convertData(data);
      this.x2.domain(d3.extent(data, function(d) {
        return d.x;
      }));
      this.canvas.svg.append("g").attr("class", "x brush").call(this.brush).selectAll("rect").attr("y", -6).attr("height", this.canvas.height + 7);
      return this;
    };

    Brush.prototype.onBrush = function() {
      this.canvas.svg.append("defs").append("clipPath").attr("id", "clip").append("rect").attr("width", this.canvas.width).attr("height", this.canvas.height);
      return this.canvas.x.domain(this.brush.empty() ? this.x2.domain() : [this.brush.extent()[0].getTime(), this.brush.extent()[1].getTime()]);
    };

    Brush.prototype.onBrushEnd = function() {
      var end, start,
        _this = this;
      this.canvas.svg.select(".brush").call(this.brush.clear());
      start = this.canvas.x.domain()[0].getTime();
      end = this.canvas.x.domain()[1].getTime();
      this.x2.domain([start, end]);
      if (end - start > 100000) {
        d3.json("/graphs/temperature/minute.json?start=" + start + "&end=" + end, function(all_data) {
          return _this.canvas.render(all_data, {
            skip: _this
          });
        });
      } else {
        d3.json("/graphs/temperature/raw.json?start=" + start + "&end=" + end, function(all_data) {
          return _this.canvas.render(all_data, {
            skip: _this
          });
        });
      }
      return this;
    };

    Brush.prototype.resetZoom = function() {
      console.log(this.x2.domain);
      this.canvas.x.domain(this.x2.domain());
      this.canvas.svg.select(".x.axis").call(this.canvas.xAxis);
      return this;
    };

    return Brush;

  })();

}).call(this);
