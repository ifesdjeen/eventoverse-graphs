// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.Eventoverse.Graphs.Line = (function() {

    function Line(canvas) {
      this.canvas = canvas;
    }

    Line.prototype.line = function() {
      var _this = this;
      if (this._line) {
        return this._line;
      }
      return this._line = d3.svg.line().interpolate(this.canvas.defaults.interpolate).x(function(d) {
        return _this.canvas.x(d.x);
      }).y(function(d) {
        return _this.canvas.y(d.y);
      });
    };

    Line.prototype.render = function(data) {
      this.canvas.svg.selectAll("path.eventoverse_graph_line").remove();
      this.path = this.canvas.svg.append("path").datum(data.values).attr("class", "line eventoverse_graph_line").attr("clip-path", "url(#clip)").attr("d", this.line()).style("stroke", data.color);
      return this;
    };

    return Line;

  })();

  this.Eventoverse.Graphs.RealTimeLine = (function(_super) {

    __extends(RealTimeLine, _super);

    function RealTimeLine(canvas, args) {
      this.canvas = canvas;
      this.args = args;
      this.tick = __bind(this.tick, this);

      this.line = __bind(this.line, this);

      this.args.feed.addDispatcher(this.tick);
    }

    RealTimeLine.prototype.line = function() {
      var _this = this;
      if (this._line) {
        return this._line;
      }
      return this._line = d3.svg.line().interpolate(this.canvas.defaults.interpolate).x(function(d, i) {
        return _this.canvas.x(i);
      }).y(function(d, i) {
        return _this.canvas.y(d.y);
      });
    };

    RealTimeLine.prototype.render = function(data) {
      return RealTimeLine.__super__.render.call(this, data);
    };

    RealTimeLine.prototype.tick = function(data) {
      if (!this.args.filter(data)) {
        return;
      }
      this.canvas.data.values.push(this.args.extractor(data));
      if (!this.canvas.attrs.paused) {
        this.path.attr("d", this.line()).attr("transform", null).transition().duration(1).ease("linear").attr("transform", "translate(" + this.canvas.x(0) + ")");
      }
      return this.canvas.data.values.shift();
    };

    return RealTimeLine;

  })(Eventoverse.Graphs.Line);

  this.Eventoverse.Graphs.AggregateLine = (function() {

    function AggregateLine(canvas) {
      this.canvas = canvas;
    }

    AggregateLine.prototype.line = function() {
      var _this = this;
      if (this._line) {
        return this._line;
      }
      return this._line = d3.svg.line().interpolate(this.canvas.defaults.interpolate).x(function(d) {
        return _this.canvas.x(d.x);
      }).y(function(d) {
        return _this.canvas.y(d.y);
      });
    };

    AggregateLine.prototype.render = function(data) {
      data = Eventoverse.Utils.mergeData(data);
      this.min_x = d3.min(data, function(d) {
        return d.x;
      });
      this.max_x = d3.max(data, function(d) {
        return d.x;
      });
      this.min_y = d3.min(data, function(d) {
        return d.y;
      });
      return this.max_y = d3.max(data, function(d) {
        return d.y;
      });
    };

    return AggregateLine;

  })();

  this.Eventoverse.Graphs.MinLine = (function(_super) {

    __extends(MinLine, _super);

    function MinLine() {
      return MinLine.__super__.constructor.apply(this, arguments);
    }

    MinLine.prototype.render = function(data) {
      var min_line;
      MinLine.__super__.render.call(this, data);
      this.canvas.svg.selectAll("path.min").remove();
      min_line = [
        {
          x: this.min_x,
          y: this.min_y
        }, {
          x: this.max_x,
          y: this.min_y
        }
      ];
      return this.canvas.svg.append("path").datum(min_line).attr("class", "line min").attr("d", this.line()).attr('stroke-width', 2).attr('stroke', "green");
    };

    return MinLine;

  })(this.Eventoverse.Graphs.AggregateLine);

  this.Eventoverse.Graphs.MaxLine = (function(_super) {

    __extends(MaxLine, _super);

    function MaxLine() {
      return MaxLine.__super__.constructor.apply(this, arguments);
    }

    MaxLine.prototype.render = function(data) {
      var max_line;
      MaxLine.__super__.render.call(this, data);
      max_line = [
        {
          x: this.min_x,
          y: this.max_y
        }, {
          x: this.max_x,
          y: this.max_y
        }
      ];
      this.canvas.svg.selectAll("path.max").remove();
      return this.canvas.svg.append("path").datum(max_line).attr("class", "line max").attr("d", this.line()).attr('stroke-width', 2).attr('stroke', "green");
    };

    return MaxLine;

  })(this.Eventoverse.Graphs.AggregateLine);

  this.Eventoverse.Graphs.Area = (function() {

    function Area(canvas) {
      this.canvas = canvas;
    }

    Area.prototype.area = function() {
      var _this = this;
      if (this._area) {
        return this._area;
      }
      return this._area = d3.svg.area().interpolate(this.canvas.defaults.interpolate).x(function(d) {
        return _this.canvas.x(d.x);
      }).y0(this.canvas.height).y1(function(d) {
        return _this.canvas.y(d.y);
      });
    };

    Area.prototype.render = function(data) {
      this.canvas.svg.selectAll("path.eventoverse_graph_area").remove();
      this.path = this.canvas.svg.append("path").datum(data.values).attr("class", "area eventoverse_graph_area").attr("d", this.area());
      return this;
    };

    return Area;

  })();

}).call(this);
